# Generated by Django 4.1.1 on 2022-10-28 15:56

import consumer.manager
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=12, unique=True)),
                ('email', models.EmailField(blank=True, max_length=100, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', consumer.manager.UserManage()),
            ],
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'Block',
            },
        ),
        migrations.CreateModel(
            name='ConnectionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_type', models.CharField(choices=[('Domestic', 'Domestic'), ('Commercial', 'Commercial'), ('Industrial', 'Industrial'), ('Agriculture', 'Agriculture')], max_length=200, unique=True)),
            ],
            options={
                'db_table': 'Connection Type',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'District',
            },
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('division', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'Division',
            },
        ),
        migrations.CreateModel(
            name='Load',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('load', models.CharField(choices=[('50-1500 KVA', '50-1500 KVA'), ('500-15000 KVA', '500-15000 KVA'), ('7500 KVA and above', '7500 KVA and above'), ('10000 KVA and above', '10000 KVA and above'), ('300 KVA and above', '300 KVA and above'), ('1-7 KW', '1-7 KW'), ('1-19 KW', '1-19 KW'), ('20-74 KW', '20-74 KW'), ('5-70 KW', '5-70 KW'), ('1-250 WT', '1-250 WT'), ('7-70 KW', '7-70 KW')], max_length=100, unique=True)),
            ],
            options={
                'db_table': 'Load',
            },
        ),
        migrations.CreateModel(
            name='Panchayat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('panchayat', models.CharField(max_length=200)),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consumer.block')),
            ],
            options={
                'db_table': 'Panchayat',
            },
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phase', models.PositiveIntegerField(choices=[(1, 1), (3, 3)], unique=True)),
            ],
            options={
                'db_table': 'Phase',
            },
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tariff', models.CharField(choices=[('HTS-I', 'HTS-I'), ('HTS-II', 'HTS-II'), ('HTS-III', 'HTS-III'), ('HTS-IV', 'HTS-IV'), ('HTSS', 'HTSS'), ('LTIS1D', 'LTIS1D'), ('LTIS2D', 'LTIS2D'), ('NDS1D', 'NDS1D'), ('LTEV', 'LTEV'), ('KJ', 'KJ'), ('DS1D', 'DS1D'), ('DS3D', 'DS3D')], max_length=50, unique=True)),
            ],
            options={
                'db_table': 'Tariff',
            },
        ),
        migrations.CreateModel(
            name='TensionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tension_type', models.CharField(choices=[('Low Tension', 'Low Tension'), ('High Tension', 'High Tension')], max_length=50, unique=True)),
            ],
            options={
                'db_table': 'Tension Type',
            },
        ),
        migrations.CreateModel(
            name='Village',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('village', models.CharField(max_length=200)),
                ('panchayat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consumer.panchayat')),
            ],
            options={
                'db_table': 'Village',
            },
        ),
        migrations.CreateModel(
            name='SubDivision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subdivision', models.CharField(max_length=200)),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consumer.division')),
            ],
            options={
                'db_table': 'SubDivision',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='consumer.connectiontype')),
                ('load', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='consumer.load')),
                ('phase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='consumer.phase')),
                ('tariff', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='consumer.tariff')),
                ('tension_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='consumer.tensiontype')),
            ],
            options={
                'db_table': 'Service',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(max_length=200)),
                ('subdivision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consumer.subdivision')),
            ],
            options={
                'db_table': 'Section',
            },
        ),
        migrations.AddField(
            model_name='block',
            name='district',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consumer.district'),
        ),
        migrations.CreateModel(
            name='Applicantion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_no', models.CharField(blank=True, max_length=100, null=True)),
                ('father_name', models.CharField(max_length=200)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=30)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='applicant/')),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('pin_code', models.PositiveBigIntegerField()),
                ('document_types', models.CharField(choices=[('adhar card', 'Adhar Card'), ('pan card', 'Pan Card'), ('voder id card', 'Voder Id Card'), ('driving license', 'Driving License'), ('ration card', 'Ration Card'), ('BPL', 'BPL'), ('passport', 'Passport')], max_length=100)),
                ('document_files', models.FileField(upload_to='applicant/')),
                ('address_types', models.CharField(choices=[('adhar card', 'Adhar Card'), ('pan card', 'Pan Card'), ('voder id card', 'Voder Id Card'), ('driving license', 'Driving License'), ('ration card', 'Ration Card'), ('BPL', 'BPL'), ('passport', 'Passport')], max_length=100)),
                ('address_front', models.FileField(upload_to='applicant/')),
                ('address_back', models.FileField(upload_to='applicant/')),
                ('owner_front', models.FileField(upload_to='applicant/')),
                ('owner_back', models.FileField(upload_to='applicant/')),
                ('district', models.CharField(max_length=100)),
                ('block', models.CharField(max_length=100)),
                ('panchayat', models.CharField(max_length=100)),
                ('village', models.CharField(max_length=100)),
                ('division', models.CharField(max_length=100)),
                ('subdivision', models.CharField(max_length=100)),
                ('section', models.CharField(max_length=100)),
                ('connection_type', models.CharField(max_length=100)),
                ('tension_type', models.CharField(max_length=100)),
                ('tariff', models.CharField(max_length=100)),
                ('phase', models.PositiveBigIntegerField()),
                ('load', models.CharField(max_length=100)),
                ('created_date', models.DateField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Application',
            },
        ),
    ]
